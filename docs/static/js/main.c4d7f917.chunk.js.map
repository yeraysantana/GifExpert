{"version":3,"sources":["components/AddCategory.tsx","components/GifGridItem.tsx","helpers/getGifs.ts","components/GifGrid.tsx","hooks/useFetchGifs.ts","GifExpertApp.tsx","reportWebVitals.ts","index.tsx"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","newCategory","String","trim","length","rest","undefined","find","cat","autoComplete","name","type","value","onChange","currentTarget","placeholder","GifGridItem","url","title","className","src","alt","getGifs","category","a","encodeURI","fetch","response","json","data","gifs","map","id","images","downsized_medium","GifGrid","loading","state","setState","useEffect","then","useFetchGifs","img","GifExpertApp","props","categories","i","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"yMA2CeA,EApCK,SAAC,GAA8B,IAA5BC,EAA2B,EAA3BA,cACrB,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAoBA,OACE,uBAAMC,SAfa,SAACC,GACpBA,EAAEC,iBACF,IAAMC,EAAcC,OAAON,GACxBK,EAAYE,OAAOC,OAAS,IAC7BV,GAAc,SAAAW,GACZ,YAA4CC,IAAzCD,EAAKE,MAAK,SAAAC,GAAG,OAAGA,IAAQP,KACnB,CAAEA,GAAR,mBAAwBI,IAEnB,YAAIA,MAEbR,EAAc,MAKhB,UACE,wDACA,uBACEY,aAAc,MACdC,KAAO,gBACPC,KAAO,OACPC,MAAQhB,EACRiB,SA1BoB,SAACd,GACzBF,EAAcE,EAAEe,cAAcF,QA0B1BG,YAAc,sB,QCrBPC,EAXK,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,IAA6B,IAAxBC,aAAwB,MAAhB,GAAgB,EAClD,OACE,qBAAKC,UAAW,kDAAhB,SACE,sBAAKA,UAAW,OAAhB,UACE,6BAAKD,IACL,qBAAKE,IAAKlB,OAAOe,GAAMI,IAAKH,U,uBCPvBI,EAAO,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DACfP,EADe,0FAC0EQ,UAAUF,GADpF,sBAEEG,MAAMT,GAFR,cAEfU,EAFe,gBAGEA,EAASC,OAHX,uBAGbC,EAHa,EAGbA,KAEFC,EAAwBD,EAAKE,KAAK,YAClC,MAAO,CACLC,GAFmF,EAAjDA,GAGlCd,MAHmF,EAA7CA,MAItCD,IAJmF,EAAtCgB,OAIjCC,iBAAiBjB,QAThB,kBAYda,GAZc,4CAAH,sDCsBLK,EAhBC,SAAC,GAAyB,IAAvBZ,EAAsB,EAAtBA,SAEjB,ECN0B,SAACA,GAC3B,MAA0B5B,mBAAwB,CAChDkC,KAAM,GACNO,SAAU,IAFZ,mBAAOC,EAAP,KAAcC,EAAd,KAeA,OAVAC,qBAAU,WACRjB,EAASC,GACNiB,MAAK,SAACV,GACLQ,EAAS,CACPT,KAAMC,EACNM,SAAS,SAGd,CAACb,IAEGc,EDVyBI,CAAalB,GAAtCa,EAAP,EAAOA,QAAeH,EAAtB,EAAgBJ,KAChB,OACE,sBAAKV,UAAW,oBAAhB,UACE,oBAAIA,UAAU,oCAAd,SAAoDI,IACnDa,GAAW,qBAAKjB,UAAW,oCAAhB,2BAEVc,EAAOF,KAAI,SAACW,GAAD,OACT,cAAC,EAAD,eAAsCA,GAApBxC,OAAOwC,EAAIV,YEYxBW,EAtBM,SAACC,GACpB,IACA,EAAoCjD,mBADnB,IACjB,mBAAOkD,EAAP,KAAmBnD,EAAnB,KACA,OACE,qCACE,8CACA,uBACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,8BAEImD,EAAWd,KAAK,SAACR,EAAUuB,GAAX,OACd,cAAC,EAAD,CAEEvB,SAAUA,GAFZ,sBACsBA,EADtB,YACkCuB,aCN/BC,G,YAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBT,MAAK,YAAkD,IAA/CU,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,QCFdO,IAASC,OAAO,cAAC,EAAD,IAAiBC,SAASC,eAAe,SAKzDX,M","file":"static/js/main.c4d7f917.chunk.js","sourcesContent":["import { useState } from \"react\"\r\nimport { Categories } from '../types/categories.types';\r\n\r\ninterface Props {\r\n  setCategories: React.Dispatch<React.SetStateAction<Categories>>\r\n}\r\n\r\nconst AddCategory = ({ setCategories }: Props) => {\r\n  const [inputValue, setInputValue] = useState('')\r\n\r\n  const handleInputChange = (e: React.FormEvent<HTMLInputElement>): void => {\r\n    setInputValue(e.currentTarget.value)\r\n  }\r\n\r\n  const handleSubmit = (e: React.FormEvent) => {\r\n    e.preventDefault()\r\n    const newCategory = String(inputValue)\r\n    if(newCategory.trim().length > 1){\r\n      setCategories(rest => {\r\n        if(rest.find(cat=> cat === newCategory) === undefined){\r\n          return [newCategory, ...rest]\r\n        }\r\n        return [...rest]\r\n      })\r\n      setInputValue('')\r\n    }\r\n  }\r\n\r\n  return (\r\n    <form onSubmit={ handleSubmit }>\r\n      <h2>Añadir Categoría</h2>\r\n      <input\r\n        autoComplete={'off'}\r\n        name={ 'categoryInput' }\r\n        type={ 'text' }\r\n        value={ inputValue }\r\n        onChange={ handleInputChange }\r\n        placeholder={ 'Buscar un Gif' }\r\n      />\r\n    </form>\r\n  )\r\n}\r\n\r\nexport default AddCategory","interface Props {\r\n  url: string\r\n  title?: string\r\n}\r\n \r\nconst GifGridItem = ({ url, title = '' }: Props) => {\r\n  return (\r\n    <div className={'cardContainer animate__animated animate__fadeIn'}>\r\n      <div className={'card'}>\r\n        <h3>{title}</h3>\r\n        <img src={String(url)} alt={title}/>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n \r\nexport default GifGridItem;","import { Category } from '../types/categories.types';\r\nimport { GiphyGif, GiphyResponse } from '../types/gif.types';\r\n\r\nexport const getGifs = async(category: Category) => {\r\n  const url = `https://api.giphy.com/v1/gifs/search?api_key=Olxih0NX14GXCP1ji7Q3xCUX5jxwmJ9k&q=${encodeURI(category)}&limit=10`\r\n  const response = await fetch(url)\r\n  const { data } = await response.json()\r\n\r\n  const gifs: GiphyResponse[] = data.map( ({id, title, images}: GiphyGif ): GiphyResponse => {\r\n        return {\r\n          id,\r\n          title,\r\n          url: images.downsized_medium.url\r\n        }\r\n  })\r\n  return gifs\r\n}","import { Category } from '../types/categories.types'\r\nimport { GiphyResponse } from '../types/gif.types'\r\nimport GifGridItem from './GifGridItem'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\n\r\ninterface Props {\r\n  category: Category\r\n}\r\n \r\nconst GifGrid = ({ category }: Props) => {\r\n\r\n  const {loading, data: images} = useFetchGifs(category)\r\n  return (\r\n    <div className={'categoryContainer'}>\r\n      <h3 className='animate__animated animate__fadeIn'>{ category }</h3>\r\n      {loading && <div className={'animate__animated animate__fadeIn'}>'Cargando...'</div>}\r\n      {\r\n        images.map((img: GiphyResponse) => (\r\n          <GifGridItem key={String(img.id)} {...img} />\r\n        ))\r\n      }\r\n    </div>\r\n  )\r\n}\r\n \r\nexport default GifGrid;","import { useState, useEffect } from 'react';\r\nimport { getGifs } from '../helpers/getGifs';\r\nimport { Category } from '../types/categories.types';\r\nimport { FetchResponse } from '../types/general.types';\r\n\r\nexport const useFetchGifs = (category: Category) => {\r\n  const [state, setState] = useState<FetchResponse>({\r\n    data: [],\r\n    loading:  true\r\n  })\r\n\r\n  useEffect(() => {\r\n    getGifs( category )\r\n      .then((gifs) => {\r\n        setState({\r\n          data: gifs,\r\n          loading: false\r\n        })\r\n      })\r\n  }, [category])\r\n\r\n  return state\r\n}\r\n\r\n\r\n","import { useState } from \"react\"\r\nimport AddCategory from './components/AddCategory';\r\nimport GifGrid from \"./components/GifGrid\";\r\nimport { Categories } from './types/categories.types';\r\ninterface GifExpertAppProps {\r\n  \r\n}\r\n \r\nconst GifExpertApp = (props: GifExpertAppProps) => {\r\n  const initData = [] as Categories\r\n  const [categories, setCategories] = useState<Categories>(initData)\r\n  return (\r\n    <>\r\n      <h2>GifExpertApp</h2>\r\n      <hr/>\r\n      <AddCategory setCategories={setCategories}/>\r\n      <div>\r\n        {\r\n          categories.map( (category, i) => (\r\n            <GifGrid\r\n              key={`category-li-${category}-${i}`}\r\n              category={category}\r\n            />\r\n          ))\r\n        }\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n \r\nexport default GifExpertApp;","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\nimport 'animate.css'\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(<GifExpertApp/>, document.getElementById('root'));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n\n"],"sourceRoot":""}